/* See LICENSE file for copyright and license details. */
#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 3;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int gappih    = 8;        /* horiz inner gap between windows */
static const unsigned int gappiv    = 8;        /* vert inner gap between windows */
static const unsigned int gappoh    = 8;        /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 8;        /* vert outer gap between windows and screen edge */
static const int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int user_bh            = 28;       /* 0 means that dwm will calculate bar height */
static const char *fonts[]	= { "JetBrainsMono Nerd Font:size=10", "Font Awesome 6 Free Solid:size=10" };
static const char dmenufont[]	= "JetBrainsMono Nerd Font:size=10";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { "#DDB6F2", "#1D1D2D", "#DDB6F2" },
	[SchemeSel]  = { "#96CDFB", "#1D1D2D", "#96CDFB" },
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };

static const Rule rules[] = {
	/* class      	        instance	title       	tags mask   	isfloating   monitor */
	{ "Firefox",            NULL,  	    NULL,		1,		0,           -1 },
	{ "qutebrowser",        NULL,  	    NULL,		1,		0,           -1 },
	{ "discord",            NULL,  	    NULL,		1 << 7,     	0,           -1 },
	{ "TelegramDesktop",  	NULL,	    NULL,		1 << 7,     	0,           -1 },
	{ "Spotify",  		NULL,	    NULL,		1 << 6,     	0,           -1 },
	{ "VSCodium",  		NULL,	    NULL,		1 << 2,        	0,           -1 },
	{ "Galculator",  	NULL,	    NULL,		0,       	1,           -1 },
	{ NULL,                 "Toolkit",  NULL,		0,       	1,           -1 },
	{ NULL,                 NULL,	"Picture-in-Picture",   0,       	1,           -1 },
};

/* layout(s) */
static const float mfact     = 0.5;	/* factor of master area size [0.05..0.95] */
static const int nmaster     = 1; 	/* number of clients in master area */
static const int resizehints = 1;    	/* 1 means respect size hints in tiled resizals */
static const int attachbelow = 1;    	/* 1 means attach after the currently active window */

#include "vanitygaps.h"

static const int layoutaxis[] = {
	SPLIT_VERTICAL,   /* layout axis: 1 = x, 2 = y; negative values mirror the layout, setting the master area to the right / bottom instead of left / top */
	TOP_TO_BOTTOM,    /* master axis: 1 = x (from left to right), 2 = y (from top to bottom), 3 = z (monocle) */
	TOP_TO_BOTTOM,    /* stack axis:  1 = x (from left to right), 2 = y (from top to bottom), 3 = z (monocle) */
};

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      flextile }, /* first entry is default */
	{ "><>",      NULL },     /* no layout function means floating behavior */
};

/* key definitions */
#define MODKEY Mod1Mask
#define WINKEY Mod4Mask
#define SHIFT ShiftMask
#define CTRL ControlMask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/bash", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0";
static const char *dmenucmd[] = { "dmenu_run", "-c", "-m", dmenumon , NULL };
static const char *termcmd[]  = { "alacritty", NULL };
static const char *suspend[]  = { "loginctl", "suspend", NULL };
/* volume control */
static const *volumemute[] = { "pactl", "set-sink-mute", "0", "toggle", NULL };
static const *volumeup[] = { "pactl", "set-sink-volume", "0", "+5%", NULL };
static const *volumedown[] = { "pactl", "set-sink-volume", "0", "-5%", NULL };
/* media control */
static const *playpause[] = { "playerctl", "--all-players", "play-pause", NULL };
static const *nexttrack[] = { "playerctl", "--all-players", "next", NULL };
static const *prevtrack[] = { "playerctl", "--all-players", "previous", NULL };
/* backlight control */
static const *brightup[] = { "backlight-up" };
static const *brightdown[] = { "backlight-down" };
/* applications */
static const char *firefox[] = { "firefox", NULL };
static const char *qutebrowser[] = { "qutebrowser", NULL };
static const char *spotify[] = { "spotify", NULL };
static const char *discord[] = { "~/.local/bin/discord", NULL };
static const char *telegram[] = { "telegram-desktop", NULL };
static const char *vifm[] = { "alacritty", "-e", "vifm", NULL };
static const char *calc[] = { "galculator", NULL };
/* dmenu */
static const char *passmenu[] = { "passmenu", NULL };
static const char *powermenu[] = { "powermenu", NULL };
static const char *maimpick[] = { "maimpick", NULL };

static Key keys[] = {
	/* modifier                     key        	function        argument */
	/* control dwm */
	{ MODKEY|SHIFT,             	XK_e,      	quit,           {0} },
	{ WINKEY|SHIFT,             	XK_0,     	tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_0,     	view,           {.ui = ~0 } },
	{ MODKEY,                       XK_p,     	spawn,          {.v = dmenucmd } },
	{ MODKEY,                       XK_b,     	togglebar,      {0} },
	{ MODKEY,                       XK_Tab,     view,           {0} },
	{ MODKEY|SHIFT,			        XK_z,   	spawn,		    {.v = suspend } },
	/* focus */
	{ MODKEY,                       XK_j,     	focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,     	focusstack,     {.i = -1 } },
	/* bring focused to top of stack */
	{ MODKEY,                       XK_Return,	zoom,           {0} },
	/* rotate stack */
	{ WINKEY|SHIFT,             	XK_j,     	rotatestack,    {.i = +1 } },
	{ WINKEY|SHIFT,             	XK_k,     	rotatestack,    {.i = -1 } },
	/* number of masters */
	{ MODKEY,			XK_i,     	incnmaster,     {.i = +1 } },
	{ MODKEY,			XK_d,     	incnmaster,     {.i = -1 } },
	/* adjust mfact */
	{ MODKEY,			XK_h,     	setmfact,       {.f = -0.05} },
	{ MODKEY,			XK_l,     	setmfact,       {.f = +0.05} },
	/* adjust cfact */
	{ WINKEY|SHIFT,			XK_h,     	setcfact,       {.f = +0.25} },
	{ WINKEY|SHIFT,			XK_l,     	setcfact,       {.f = -0.25} },
	{ WINKEY|SHIFT,			XK_o,     	setcfact,       {.f =  0.00} },
	/* gaps */
	{ MODKEY|WINKEY,		XK_equal,	incrgaps,       {.i = +1 } },
	{ MODKEY|WINKEY,		XK_minus, 	incrgaps,       {.i = -1 } },
	{ MODKEY|WINKEY,		XK_g,     	togglegaps,     {0} },
	{ MODKEY|WINKEY,		XK_0,     	defaultgaps,    {0} },
	/* layouts */
	{ WINKEY|CTRL,			XK_f,     	setlayout,      {.v = &layouts[1]} }, // floating (no layout)
	{ WINKEY|CTRL,			XK_t,     	setflexlayout,  {.i = 261 } }, // default tile
	{ WINKEY|CTRL,			XK_m,     	setflexlayout,  {.i =   6 } }, // monocle
	{ WINKEY|CTRL,			XK_d,     	setflexlayout,  {.i = 262 } }, // deck layout
	{ WINKEY|CTRL,			XK_b,     	setflexlayout,  {.i = 272 } }, // bstack layout
	{ WINKEY|CTRL,			XK_g,     	setflexlayout,  {.i =   7 } }, // grid
	{ WINKEY|CTRL,			XK_c,     	setflexlayout,  {.i = 293 } }, // centered master
	/* tiling control  */
	{ WINKEY|CTRL,			XK_n,      	rotatelayoutaxis, {.i = 0} }, // flextile, 0 = layout axis 
	{ WINKEY|CTRL,			XK_j,    	rotatelayoutaxis, {.i = 1} }, // flextile, 1 = master axis 
	{ WINKEY|CTRL,			XK_k,    	rotatelayoutaxis, {.i = 2} }, // flextile, 2 = stack axis 
	{ WINKEY|CTRL,			XK_Tab, 	mirrorlayout,     {0} },      // flextile, flip master and stack areas 
	/* window control */
	{ WINKEY,                       XK_space, 	setlayout,      {0} },
	{ MODKEY|SHIFT,             	XK_c,     	killclient,     {0} },
	{ WINKEY|SHIFT,             	XK_space, 	togglefloating, {0} },
	/* applications */
	{ MODKEY|SHIFT,             	XK_Return,	spawn,          {.v = termcmd } },
	{ MODKEY|SHIFT,             	XK_m,		spawn,          {.v = spotify } },
	{ MODKEY|SHIFT,             	XK_d,		spawn,          {.v = discord } },
	{ MODKEY|SHIFT,             	XK_i,		spawn,          {.v = firefox } },
	{ MODKEY|SHIFT,             	XK_w,		spawn,          {.v = qutebrowser } },
	{ MODKEY|SHIFT,             	XK_t,		spawn,          {.v = telegram } },
	{ MODKEY|SHIFT,             	XK_f,		spawn,          {.v = vifm } },
	{ MODKEY,			XK_grave,	spawn,		{.v = calc } },
	/* dmenu */
	{ MODKEY|CTRL,			XK_p,		spawn,		{.v = passmenu } },
	{ MODKEY|CTRL,			XK_s,		spawn,		{.v = maimpick } },
	{ MODKEY|CTRL,			XK_z,		spawn,		{.v = powermenu } },
	/* volume control */
	{ 0, XF86XK_AudioMute,		spawn,		{.v = volumemute } },
	{ 0, XF86XK_AudioLowerVolume,	spawn,		{.v = volumedown } },
	{ 0, XF86XK_AudioRaiseVolume,	spawn,		{.v = volumeup } },
	/* media control */
	{ 0, XF86XK_AudioPrev,		spawn,          {.v = prevtrack } },
	{ 0, XF86XK_AudioPlay,		spawn,          {.v = playpause } },
	{ 0, XF86XK_AudioNext,		spawn,          {.v = nexttrack } },
	/* backlight control */
	{ 0, XF86XK_MonBrightnessUp,	spawn,		{.v = brightup } },
	{ 0, XF86XK_MonBrightnessDown,	spawn,		{.v = brightdown } },
	/* tags */
	TAGKEYS(XK_1, 0)
	TAGKEYS(XK_2, 1)
	TAGKEYS(XK_3, 2)
	TAGKEYS(XK_4, 3)
	TAGKEYS(XK_5, 4)
	TAGKEYS(XK_6, 5)
	TAGKEYS(XK_7, 6)
	TAGKEYS(XK_8, 7)
	TAGKEYS(XK_9, 8)
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

